# -*- coding: utf-8 -*-
"""spam mail detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fls352r4Kgyd4Xx8TVBJvB3L-dQ9k1YA
"""

import pandas as pd

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

from sklearn.naive_bayes import GaussianNB,MultinomialNB

from sklearn.neighbors import KNeighborsClassifier

from sklearn.linear_model import LogisticRegression

from sklearn.svm import SVC

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data=pd.read_csv('spam_assassin.csv')

data.head()

from sklearn.feature_extraction.text import TfidfVectorizer

vect=TfidfVectorizer()

x=vect.fit_transform(data['text'])
y=data['target']

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=42)

"""MODEL 1"""

model=DecisionTreeClassifier(max_depth=10)

model.fit(xtrain,ytrain)

pred=model.predict(xtest)

acc=accuracy_score(ytest,pred)

cm=confusion_matrix(ytest,pred)

crep=classification_report(ytest,pred)

print('ACCURACY DecisionTreeClassifier :','\n',acc)

print('\n')

print('CLASSIFICATION REPORT DecisionTreeClassifier:' ,'\n',crep)

print('\n')


print('CONFUSION MATRIX DecisionTreeClassifier:','\n',cm)

"""MODEL 2"""

model_2=MultinomialNB()
model_2.fit(xtrain,ytrain)

pred_2=model_2.predict(xtest)

acc_model_2=accuracy_score(ytest,pred_2)

cm_2=confusion_matrix(ytest,pred_2)

class_rep_2=classification_report(ytest,pred_2)

print('ACCURACY MultinomialNB :','\n',acc_model_2)

print('\n')

print('CLASSIFICATION REPORT MultinomialNB:' ,'\n',class_rep_2)

print('\n')


print('CONFUSION MATRIX MultinomialNB:','\n',cm_2)

"""MODEL 3

KNN
"""

knn_model=KNeighborsClassifier(n_neighbors=1)
knn_model.fit(xtrain,ytrain)

pred_3=knn_model.predict(xtest)

acc_knn=accuracy_score(ytest,pred_3)

cm_3=confusion_matrix(ytest,pred_3)

class_rep_knn=classification_report(ytest,pred_3)

print('ACCURACY KNeighborsClassifier :','\n',acc_knn)

print('\n')

print('CLASSIFICATION REPORT KNeighborsClassifier:' ,'\n',class_rep_knn)

print('\n')


print('CONFUSION MATRIX KNeighborsClassifier:','\n',cm_3)

"""MODEL 4"""

model_log=LogisticRegression()

model_log.fit(xtrain,ytrain)

pred_log=model_log.predict(xtest)

acc_log=accuracy_score(ytest,pred_log)

cm_log=confusion_matrix(ytest,pred_log)

class_rep_log=classification_report(ytest,pred_log)

print('ACCURACY LogisticRegression:','\n',acc_log)

print('\n')

print('CLASSIFICATION REPORT LogisticRegression:' ,'\n',class_rep_log)

print('\n')


print('CONFUSION MATRIX LogisticRegression:','\n',cm_log)

"""MODEL 5"""

rfc=RandomForestClassifier(max_depth=10)
rfc.fit(xtrain,ytrain)

pred_rfc=rfc.predict(xtest)

acc_rfc=accuracy_score(ytest,pred_rfc)

class_rep_rfc=classification_report(ytest,pred_rfc)

cm_rfc=confusion_matrix(ytest,pred_rfc)

print('ACCURACY RANDOM FOREST CLASSIFIER:','\n',acc_rfc)

print('\n')

print('CLASSIFICATION REPORT RANDOM FOREST CLASSIFIER:' ,'\n',class_rep_rfc)

print('\n')


print('CONFUSION MATRIX RANDOM FOREST CLASSIFIER:','\n',cm_rfc)

"""MODEL 6

SVM
"""

model_svm=SVC(kernel='sigmoid')
model_svm.fit(xtrain,ytrain)

pred_svm=model_svm.predict(xtest)

acc_svm=accuracy_score(ytest,pred_svm)

cm_svm=confusion_matrix(ytest,pred_svm)

class_rep_svm=classification_report(ytest,pred_svm)

print('ACCURACY SVC:','\n',acc_svm)

print('\n')

print('CLASSIFICATION REPORT SVC:' ,'\n',class_rep_svm)

print('\n')


print('CONFUSION MATRIX SVC:','\n',cm_svm)

