# -*- coding: utf-8 -*-
"""Heart_Disease_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jGFsLC6tJPL8uN4wyzPh-GQoPMY_kSO4
"""

import warnings
warnings.filterwarnings('ignore')

from sklearn.model_selection import train_test_split

from sklearn.metrics import classification_report,accuracy_score,confusion_matrix

from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import MultinomialNB,GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier
import xgboost as xgb
from xgboost import XGBClassifier

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('Heart_Disease_Prediction.csv')
data.head()

data.describe()

data.info()

data.shape

sns.barplot(data['Heart Disease'],palette='viridis')
plt.xlabel("Count")
plt.ylabel("Category")
plt.title("Heart Disease Distribution")
plt.show()

x=data.drop('Heart Disease',axis=1)
y=data['Heart Disease']

y=y.map({'Presence':1,'Absence':0})

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=42)

classifiers={

'SVC':SVC(kernel='sigmoid'),
'RANDOM FOREST CLASSIFIER':RandomForestClassifier(max_depth=10),
'KNN':KNeighborsClassifier(n_neighbors=5),
'naive_bayes':MultinomialNB(),
'logreg':LogisticRegression(),
'DT':DecisionTreeClassifier(max_depth=10),
'neural_network':MLPClassifier(),
'GBC':GradientBoostingClassifier(),
'ABC':AdaBoostClassifier(),
 'XGB':XGBClassifier()

}

for name,model in classifiers.items():
  print('name: ',name,'\n')
  model.fit(xtrain,ytrain)
  classifiers_prediction=model.predict(xtest)
  accuracy_classifiers=accuracy_score(ytest,classifiers_prediction)
  classification_report_classifiers=classification_report(ytest,classifiers_prediction)
  confusion_matrix_classifiers=confusion_matrix(ytest,classifiers_prediction)
  print(f"accuracy_score :",np.round(accuracy_classifiers,2))
  print('\n')
  print(f"classification_report :",'\n',classification_report_classifiers)
  print(f"confusion_matrix :",'\n',confusion_matrix_classifiers)
  print('\n')
  sns.heatmap(confusion_matrix_classifiers,cmap='inferno',annot=True)
  plt.show()
